"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Basics
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"use vim settings, rather then vi settings
set nocompatible

"turn debug on
"set verbose=9

"don't use local version of .vimrc
set noexrc

"autocmd!
filetype off

" initialize vundle
set rtp+=~/.vim/bundle/Vundle.vim

" Vundle {{{
call vundle#begin()
" let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'

" ##### UI
Plugin 'juanolon/mod-base16-railscasts'
Plugin 'itchyny/lightline.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'FelikZ/ctrlp-py-matcher'
Plugin 'kshenoy/vim-signature'
Plugin 'Valloric/MatchTagAlways'
Plugin 'Valloric/YouCompleteMe'
Plugin 'whatyouhide/vim-lengthmatters'

" ##### Helpers
Plugin 'tpope/vim-surround'
Plugin 'tomtom/tcomment_vim'
Plugin 'vim-scripts/matchit.zip'
Plugin 'scrooloose/syntastic'
Plugin 'justinmk/vim-sneak'
Plugin 'godlygeek/tabular'
Plugin 'zhaocai/GoldenView.Vim'
Plugin 'tpope/vim-repeat'
Plugin 'airblade/vim-rooter'
Plugin 'goldfeld/vim-seek'
Plugin 'jiangmiao/auto-pairs'

" ##### Tools
" required for vim-notes
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-notes'
Plugin 'sjl/splice.vim'
Plugin 'sjl/gundo.vim'
Plugin 'vim-scripts/TaskList.vim'
" ToDo: configure nerdtree
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-vinegar'
Plugin 'junegunn/vim-peekaboo'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

" ##### FileTypes
Plugin 'othree/html5.vim'
Plugin 'beyondwords/vim-twig'
Plugin 'groenewege/vim-less'
Plugin 'tpope/vim-markdown'
" syntax and indentantion
Plugin 'pangloss/vim-javascript'
Plugin 'myhere/vim-nodejs-complete'
Plugin 'fatih/vim-go'
" required for phpcomplete_extended
" Plugin 'm2mdas/phpcomplete-extended'
" Plugin 'm2mdas/phpcomplete-extended-laravel'
" Plugin 'm2mdas/phpcomplete-extended-symfony'
Plugin 'joonty/vdebug'
" required for pdv
Plugin 'tobyS/vmustache'
Plugin 'tobyS/pdv'
Plugin 'stephpy/vim-php-cs-fixer'
Plugin 'honza/dockerfile.vim'
call vundle#end()
" }}}

" General {{{
filetype plugin indent on "load filetype plugins/indent settings
syntax on "enable syntax highlight
set shell=/bin/bash "set bash as default shell
set backspace=2 "value 2 is the same as =indent,eol,start "make backspace a more flexible
set clipboard=unnamed
if has('nvim')
    set clipboard+=unnamedplus
endif
set fileformat=unix
set noerrorbells
" set nohidden
set hidden
set history=1000 "keep 1000 lines of command line history
set undolevels=1000
set autoread "set to auto read when a file is changed from the outside
set gdefault "the /g flag on :s substitutions by default
set synmaxcol=800 "don't highlight lines longer than 800

set encoding=utf-8 " Necessary to show unicode glyphs
set tags=./tags;/

" colorscheme wombat " alternative: maloki, ir_black
" colorscheme wombat256mod
colorscheme mod-base16-railscasts
set background=dark

" Don't timeout key sequences
set notimeout
" Timeout key codes (don't wait after Esc)
set ttimeout
set ttimeoutlen=10

au BufWinLeave ?* mkview
au BufWinEnter ?* silent! loadview

set scs "smart search (override 'ic' when pattern has upper)
set complete=.,w,b,t,kspell "set the autocomplete search list

" }}}

" Backup {{{
if ! isdirectory(expand('~/.vimbackup'))
  call mkdir(expand('~/.vimbackup'))
endif
if ! isdirectory(expand('~/.vimtmp'))
  call mkdir(expand('~/.vimtmp'))
endif

if ! isdirectory(expand('~/.vimundo'))
  call mkdir(expand('~/.vimundo'))
endif

" Set persistent undo
set undodir=~/.vimundo
set undofile

" backup
set noswapfile
set backup
set backupdir=~/.vimbackup
set backupext=.vimbackup
set directory=~/.vimtmp
" }}}

" Fixes {{{
" close quick fix window, when leaving file
aug QFClose
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

" close scratch window
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
" }}}

" UI {{{
set guioptions=acr

set laststatus=2 "always show the status bar
set lazyredraw "do not redraw while running macros
set ttyfast

set cmdheight=2 "set the commandheight
set hlsearch "turn if highlight for searched expressions
set incsearch "do incremental searches

set wildmenu "show list instead of ust completing
set wildmode=list:longest,full "command <tab> completion, list matches, then longest common part, then all
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg          " binary images
set wildignore+=*.DS_Store?                             " OSX bullshit
set wildignore+=*.pdf,*.dvi,*.ps                        " Documents

set ignorecase "set ignorecase on
set smartcase
set ruler "show the cursor position all the time

set scrolljump=1 "lines to scroll when cursor leaves screen
set scrolloff=0 "minimun lines to keep adove and below cursor
set showmatch
set showmode "show the current mode

set relativenumber
set number

set showcmd "show partial commands?
set magic "magic for regular expressions
set anti enc=utf-8 gfn=Source_Code_Pro:h13,Inconsolata-dz_for_Powerline:h11,Menlo:h11,Monaco:h11

"show characters
set list
set listchars=tab:>\ ,eol:Â¬,extends:>,precedes:<
" }}}

" statusline {{{
hi User1 ctermfg=250 ctermbg=4
hi User2 ctermfg=250 ctermbg=0
hi User3 ctermfg=250 ctermbg=237
hi User4 ctermfg=250 ctermbg=240
hi User5 ctermfg=250 ctermbg=240
hi User7 ctermfg=250 ctermbg=240
hi User8 ctermfg=250 ctermbg=0
hi User9 ctermfg=250 ctermbg=240
hi User0 ctermfg=250 ctermbg=240

" function! s:RefreshStatus()
"   for nr in range(1, winnr('$'))
"     call setwinvar(nr, '&statusline', '%!Status(' . nr . ')')
"   endfor
" endfunction
"
" augroup status
"   autocmd!
"   autocmd VimEnter,WinEnter,BufWinEnter * call <SID>RefreshStatus()
" augroup END

set statusline=
set statusline+=%1*\ %{Mode()}\                            "Mode
set statusline+=%2*\[%n:%{NumberOfBuffers()}]             "buffernr
set statusline+=%3*\ %<%F\                                "File+path
set statusline+=%4*\ %y\ \|\                                  "FileType
set statusline+=\%{''.(&fenc!=''?&fenc:&enc).''}\ \|\      "Encoding
set statusline+=\%{&ff}\                              "FileFormat (dos/unix..)
set statusline+=%5*\ %{CurrentProject()}\%{MyBranch()}\  "Spellanguage & Highlight on?
set statusline+=%8*\ %=\ row:%l/%L\ (%03p%%)\             "Rownumber/total (%)
set statusline+=%9*\ col:%03c\                            "Colnr
set statusline+=%0*\ \ %m%r%w\ %P\ \                      "Modified? Readonly? Top/bot.

function! NumberOfBuffers()
    return len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
endfunction
function! CurrentProject()
    if &ft !~? 'vimfiler\|gundo\|notes\|vundle'
        return ''
    endif
    return ''
endfunction
function! Mode()
    redraw
    let l:mode = mode()

    if     mode ==# "n"  | exec 'hi User1 ctermfg=250 ctermbg=4' | return "N"
    elseif mode ==# "i"  | exec 'hi User1 ctermfg=250 ctermbg=10' | return "I"
    elseif mode ==# "c"  | exec 'hi User1 ctermfg=250 ctermbg=12' | return "C"
    elseif mode ==# "R"  | exec 'hi User1 ctermfg=250 ctermbg=1' | return "R"
    elseif mode ==# "v"  | exec 'hi User1 ctermfg=250 ctermbg=8' | return "V"
    elseif mode ==# "V"  | exec 'hi User1 ctermfg=250 ctermbg=8' | return "VL"
    elseif mode ==# "" | exec 'hi User1 ctermfg=250 ctermbg=8' | return "VB"
    else                 | return l:mode
    endif
endfunc
" if !has('gui_running')
"     au InsertEnter  * redraw!
"     au InsertChange * redraw!
"     au InsertLeave  * redraw!
" endif
" }}}

" Folding {{{
set foldmethod=manual
set nofoldenable " don't open folds by default
" Close higher-level folds on foldenable
set foldnestmax=1
set foldlevel=1
" toggle with space
vnoremap <Space> za
nnoremap <Space> za

fu! CustomFoldText()
    "get first non-blank line
    let fs = v:foldstart
    while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
    endwhile
    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif

    let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " " . foldSize . " lines "
    let foldLevelStr = repeat("+--", v:foldlevel)
    let lineCount = line("$")
    let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
    let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
    return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf
set foldtext=CustomFoldText()
" }}}

" Tabs / Spaces {{{
set expandtab "insert space character, when tab key is pressed
set tabstop=4 "tabs and indenting
set shiftwidth=4
set softtabstop=4
set autoindent "always set auto indenting on

set smartindent
set wrap
set shiftround "always round indents to multiple of shiftwidth
set copyindent "use existind indents for new indents
set preserveindent "save as much indent structure as possible

" }}}

" TODO remove
" " NETRW {{{ disabled
" " Toggle Vexplore with Ctrl-E
" function! ToggleVExplorer()
"   if exists("t:expl_buf_num")
"       let expl_win_num = bufwinnr(t:expl_buf_num)
"       if expl_win_num != -1
"           let cur_win_nr = winnr()
"           exec expl_win_num . 'wincmd w'
"           close
"           exec cur_win_nr . 'wincmd w'
"           unlet t:expl_buf_num
"       else
"           unlet t:expl_buf_num
"       endif
"   else
"       exec '1wincmd w'
"       Vexplore
"       let t:expl_buf_num = bufnr("%")
"   endif
" endfunction
" " map <silent> <C-E> :call ToggleVExplorer()<CR>
"
" " Hit enter in the file browser to open the selected
" " file with :vsplit to the right of the browser.
" let g:netrw_browse_split = 3
" let g:netrw_altv = 1
"
" " Default to tree mode
" let g:netrw_liststyle=3
" " }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" SYNTASTIC {{{
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1 " open error-windows
let g:syntastic_auto_jump=0 " jump to the first error
let g:syntastic_mode_map = { 'mode': 'passive',
                           \ 'active_filetypes': [ 'php', 'JSON', 'sh', 'css', 'xml', 'twig' ],
                           \ 'passive_filetypes': [ 'html', 'javascript' ] }
let g:syntastic_jsl_conf = '$HOME/.vim/jsl.conf'
" }}}

" lightline {{{
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'branch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'branch': 'MyBranch',
      \   'readonly': 'MyReadonly',
      \   'modified': 'MyModified',
      \   'filename': 'MyFilename',
      \   'mode': 'MyMode',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '|', 'right': '|' }
      \ }

function! MyBranch()
    if &ft !~? 'vimfiler\|gundo\|notes\|vundle'
        let branch = system("git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* //'")
        if branch != ''
            return substitute(branch, '\n', '', 'g')
        endif
    endif
    return ''
endfunction
function! MyModified()
  return &ft =~ 'help\|gundo\|vundle' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction
function! MyReadonly()
  return &ft !~? 'help\|gundo\|vundle' && &readonly ? 'RO' : ''
endfunction
function! MyFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname =~ '__Gundo\|NERD_tree' ? '' :
        \ &ft == 'nerdtree' ? '' :
        \ &ft == 'vundle' ? '' :
        \ ('' != fname ? fname : '[No Name]')
endfunction
function! MyMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname == '__Gundo__' ? 'Gundo' :
        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
        \ fname == '[Vundle] Installer' ? 'Vundle Installer' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction
function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction
let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }
function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost g:syntastic_mode_map['active_filetypes'] call lightline#update()
augroup END

" augroup status
"   autocmd!
"   autocmd VimEnter,WinEnter,BufWinEnter * call lightline#update()
" augroup END
" }}}

" vim-notes {{{
if ! isdirectory(expand('~/notes'))
  call mkdir(expand('~/notes'))
endif
let g:notes_directories = [ '~/notes' ]
let g:notes_title_sync = 'change_title' " if file name or first line is changed, this update the first line
" }}}

" CtrlP {{{
let g:ctrlp_working_path_mode = 0 "don't change working directory..
let g:ctrlp_match_window_reversed = 0 " listing order from top to bottom
let g:ctrlp_clear_cache_on_exit = 0 " cross session caching
let g:ctrlp_cache_dir = $HOME.'/.vimtmp/ctrlp'
let g:ctrlp_max_depth = 20
let g:ctrlp_dotfiles = 0 " don't scan dotfiles
let g:ctrlp_open_new_file = 'u' " ope new file in same window
let g:ctrlp_open_multiple_files = 'r' " open multiple files in the current window
let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_switch_buffer = 'et'
let g:ctrlp_by_filename = 1
let g:ctrlp_max_files = 0

" PyMatcher for CtrlP
if !has('python')
    echo 'In order to use pymatcher plugin, you need +python compiled vim'
else
    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif

if executable('ag')
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
        \ --ignore .git
        \ --ignore .svn
        \ --ignore .hg
        \ --ignore node_modules
        \ --ignore .DS_Store
        \ --ignore "**/*.pyc"
        \ -g ""'
else
    let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
    let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others']
endif

nnoremap <C-b> :CtrlPBuffer<CR>
" }}}

" vim-nodejs-complete {{{
let g:nodejs_complete_config = {
\  'js_compl_fn': 'jscomplete#CompleteJS',
\  'max_node_compl_len': 15
\}

autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
" }}}

" vim-lengthmatters {{{
let g:lengthmatters_start_at_column = 120
" }}}

" Tabularize: {{{
vmap <leader>t= :Tabularize /=<CR>
vmap <leader>t: :Tabularize /:\zs/l0l1<CR>
" }}}

" TaskList: {{{
nnoremap <leader>t <Plug>TaskList
let g:tlWindowPosition = 1
let g:tlTokenList = ['FIXME', 'TODO', 'XXX']
" }}}

" Gundo: {{{
let g:gundo_preview_bottom = 1
" }}}

" MatchTagAlways: {{{
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'htmldjango' : 1,
    \ 'ezp' : 1,
    \ 'twig' : 1,
    \}
" }}}

" YouCompleteMe: {{{
" change this map, c-space doesn't work, because control will be send the ESC
" character. also when c+space are pressed (maybe change this on keyremap4mac)
" let g:ycm_key_invoke_completion = '<C-Space>'

" TODO check this. from neocomplete
" maps
" <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" function! s:my_cr_function()
  " return neocomplete#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  " return pumvisible() ? neocomplete#close_popup() : "\<CR>"
" endfunction

" ToDo: navigte optios with <control>+j/k
" }}}

" Ultisnips: {{{
" let g:UltiSnipsExpandTrigger="<c-j>"
" let g:UltiSnipsJumpForwardTrigger="<c-j>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:snips_author="Juan Pablo Stumpf <juanolon@gmail.com>"
let g:UltiSnipsEditSplit="horizontal"
let g:UltiSnipsExpandTrigger="<C-l>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-k>"
let g:UltiSnipsSnippetDirectories=["Ultisnips"]

let g:vundle_lazy_load=1
let g:ycm_show_diagnostics_ui=0

func! g:JInYCM()
    if pumvisible()
        return "\<C-n>"
    else
        return "\<c-j>"
endfunction

func! g:KInYCM()
    if pumvisible()
        return "\<C-p>"
    else
        return "\<c-k>"
endfunction
inoremap <c-j> <c-r>=g:JInYCM()<cr>
au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
" }}}

" VDebug: {{{
let g:vdebug_keymap = {
\    "run" : "<Leader>s",
\    "run_to_cursor" : "<Down>",
\    "step_over" : "<Up>",
\    "step_into" : "<Right>",
\    "step_out" : "<Left>",
\    "close" : "q",
\    "detach" : "x",
\    "set_breakpoint" : "<Leader>d",
\    "eval_visual" : "<Leader>e"
\}

let g:vdebug_options = {
\    "break_on_open" : 0,
\    "watch_window_style": 'compact',
\    "watch_window_height": 40,
\    "status_window_height": 5
\}
" }}}

" GoldenView: {{{
let g:goldenview__enable_default_mapping = 0
nmap <silent> <leader><C-l> <Plug>GoldenViewSplit
" }}}

" Pdv: {{{
let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
nnoremap <buffer> <C-p> :call pdv#DocumentWithSnip()<CR>
" }}}

" php-complete {{{
" autocmd FileType php set omnifunc=phpcomplete#CompletePHP
" autocmd FileType php call s:checkPHPSettings()
" function! s:checkPHPSettings()
"     if phpcomplete_extended#laravel#is_valid_project()
"         setlocal omnifunc=phpcomplete_extended#CompletePHP
"         let g:phpcomplete_index_composer_command = 'composer'
"     else
"         call phpcomplete_extended#disable()
"     endif
" endfunction
" }}}

" vim-php-cs-fixer: {{{
" let g:php_cs_fixer_path = "~/php-cs-fixer.phar" " define the path to the php-cs-fixer.phar
let g:php_cs_fixer_level = "psr2"                  " which level ?
let g:php_cs_fixer_config = "sf23"             " configuration
let g:php_cs_fixer_php_path = "php"               " Path to PHP
" If you want to define specific fixers:
let g:php_cs_fixer_fixers_list = "parenthesis"
let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)
let g:php_cs_fixer_dry_run = 0                    " Call command with dry-run option
let g:php_cs_fixer_verbose = 0                    " Return the output of command if 1, else an inline information.
nnoremap <silent><leader>f :call PhpCsFixerFixFile()<CR>
" }}}

" fatih/vim-go {{{
" quick fix for golang
let $PATH .= ':/Users/juanolon/gocode/bin:/usr/local/opt/go/libexec/bin'
" let g:go_bin_path="/Users/juanolon/gocode/bin"
" let g:go_bin_path="/usr/local/opt/go/libexec/bin"
let g:go_fmt_command = "goimports"
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)

au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
"}}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Maps
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maps {{{
nnoremap gp `[v`]

" toggle paste
nnoremap <F3> :set paste!<cr>
" gundo
nnoremap <F5> :GundoToggle<CR>
" remove unwanted spaces and keep last search and retab
nnoremap <silent> <F6> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<Bar>:retab<CR>
" TODO: when i search for a new entry, than always activate hlseach
nnoremap <silent> <F7> :set hlsearch!<CR>
" TagBar
nmap <F8> :TagbarToggle<CR>
" toggle syntastic mode
nnoremap <F10> :SyntasticToggleMode<CR>
" toggle between displaying whitespace characters or not
noremap <F11> :set list!<CR>

" Save with sudo.
cnoremap w!! %!sudo tee > /dev/null %
cnoremap W w
cnoremap Bd bd

noremap k gk
noremap j gj
noremap 0 g0
noremap $ g$

" Navigate 4x faster when holding down Ctrl
nnoremap <c-j> 4j
nnoremap <c-k> 4k
nnoremap <c-h> 4h
nnoremap <c-l> 4l
cnoremap <c-j> 4j
cnoremap <c-k> 4k
cnoremap <c-h> 4h
cnoremap <c-l> 4l

" disable arrows
" noremap <Up> <nop>
" noremap <Down> <nop>
" noremap <Left> <nop>
" noremap <Right> <nop>

" start/end of line
nnoremap <C-h> ^
nnoremap <C-l> $
vnoremap <C-h> ^
vnoremap <C-l> $

" split lines under the cursor (opposite of J)
" noremap <c-m> K
noremap K i<CR><Esc>g;

" Delete a character with the black hole register.
nnoremap X  "_X
nnoremap x  "_x

cnoremap <C-b> <S-Left>
cnoremap <C-w> <S-Right>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>
cnoremap <C-d> <C-w>

" Fix linewise visual selection of various text objects
nnoremap VV V
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV

noremap ' `

autocmd FileType javascript nnoremap <Leader>js :nbs<CR>
autocmd FileType javascript nnoremap <Leader>jc :nbs<CR>
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Languages
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Twig
autocmd FileType apache set commentstring=#\ %s

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Highlight Word {{{
" https://github.com/sjl/dotfiles/blob/master/vim/vimrc#L1827
"
" This mini-plugin provides a few mappings for highlighting words temporarily.
"
" Sometimes you're looking at a hairy piece of code and would like a certain
" word or two to stand out temporarily.  You can search for it, but that only
" gives you one color of highlighting.  Now you can use <leader>N where N is
" a number from 1-6 to highlight the current word in a specific color.

function! HiInterestingWord(n)
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd("InterestingWord" . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction

" TODO: clear all iteresting words
nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>

hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195
" }}}

" Zoom / Restore window {{{
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        exec t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
" nnoremap <silent> <M-z> :ZoomToggle<CR>
nnoremap <silent> <C-w>z :ZoomToggle<CR>
" }}}

" show syntax item name {{{
function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction

" show syntax block
" call Pl#Theme#InsertSegment(SyntaxItem(), 'after', 'filetype')
" }}}

" show supported colors {{{
" Color test: Save this file, then enter ':so %'
" Then enter one of following commands:
"   :VimColorTest    "(for console/terminal Vim)
"   :GvimColorTest   "(for GUI gvim)
function! VimColorTest(outfile, fgend, bgend)
  let result = []
  for fg in range(a:fgend)
    for bg in range(a:bgend)
      let kw = printf('%-7s', printf('c_%d_%d', fg, bg))
      let h = printf('hi %s ctermfg=%d ctermbg=%d', kw, fg, bg)
      let s = printf('syn keyword %s %s', kw, kw)
      call add(result, printf('%-32s | %s', h, s))
    endfor
  endfor
  call writefile(result, a:outfile)
  execute 'edit '.a:outfile
  source %
endfunction
" Increase numbers in next line to see more colors.
command! VimColorTest call VimColorTest('vim-color-test.tmp', 12, 16)

function! GvimColorTest(outfile)
  let result = []
  for red in range(0, 255, 16)
    for green in range(0, 255, 16)
      for blue in range(0, 255, 16)
        let kw = printf('%-13s', printf('c_%d_%d_%d', red, green, blue))
        let fg = printf('#%02x%02x%02x', red, green, blue)
        let bg = '#fafafa'
        let h = printf('hi %s guifg=%s guibg=%s', kw, fg, bg)
        let s = printf('syn keyword %s %s', kw, kw)
        call add(result, printf('%s | %s', h, s))
      endfor
    endfor
  endfor
  call writefile(result, a:outfile)
  execute 'edit '.a:outfile
  source %
endfunction
command! GvimColorTest call GvimColorTest('gvim-color-test.tmp')
" }}}

" Next and Last {{{
" thanks steve losh

"
" Motion for "next/last object".  "Last" here means "previous", not "final".
" Unfortunately the "p" motion was already taken for paragraphs.
"
" Next acts on the next object of the given type in the current line, last acts
" on the previous object of the given type in the current line.
"
" Currently only works for (, [, {, b, r, B, ', and ".
"
" Some examples (C marks cursor positions, V means visually selected):
"
" din'  -> delete in next single quotes                foo = bar('spam')
"                                                      C
"                                                      foo = bar('')
"                                                                C
"
" canb  -> change around next parens                   foo = bar('spam')
"                                                      C
"                                                      foo = bar
"                                                               C
"
" vil"  -> select inside last double quotes            print "hello ", name
"                                                                        C
"                                                      print "hello ", name
"                                                             VVVVVV

onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>

onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>

function! s:NextTextObject(motion, dir)
  let c = nr2char(getchar())

  if c ==# "b"
      let c = "("
  elseif c ==# "B"
      let c = "{"
  elseif c ==# "r"
      let c = "["
  endif

  exe "normal! ".a:dir.c."v".a:motion.c
endfunction

" }}}

" Number Motion {{{
" Motion for numbers.  Great for CSS.  Lets you do things like this:
" margin-top: 200px; -> daN -> margin-top: px;

onoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
xnoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
onoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
onoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>

function! s:NumberTextObject(whole)
    normal! v

    while getline('.')[col('.')] =~# '\v[0-9]'
        normal! l
    endwhile

    if a:whole
        normal! o

        while col('.') > 1 && getline('.')[col('.') - 2] =~# '\v[0-9]'
            normal! h
        endwhile
    endif
endfunction
" }}}

" Execute {{{
":[range]Execute    Execute text lines as ex commands.
command! -bar -range Execute silent <line1>,<line2>yank z | let @z = substitute(@z, '\n\s*\\', '', 'g') | @z
" }}}

" Show rebundant spaces {{{
highlight RedundantSpaces ctermbg=grey guibg=grey
au Syntax * syn match RedundantSpaces /\s\+$\| \+\ze\t/
highlight BadWhitespace ctermbg=red guibg=red
fun! s:MatchBadWhitespace(current)
    if exists('b:hide_bad_whitespace')
        match none
    return
    endif
    if a:current
        match BadWhitespace /\s\+$/
    else
        match BadWhitespace /\s\+\%#\@<!$/
    endif
endfun

augroup WhitespaceMatch
    " Highlight whitespace on open buffer
    autocmd BufWinEnter * call s:MatchBadWhitespace(1)
    " Don't highlight while typing
    autocmd InsertEnter * call s:MatchBadWhitespace(0)
    autocmd InsertLeave * call s:MatchBadWhitespace(1)
    " Clear match when leaving buffer to avoid memory leaks
    autocmd BufWinLeave * call clearmatches()
augroup END
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Filetypes specific settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" settings {{{
augroup ft_c
    au!
    au FileType php setlocal foldmethod=manual
augroup END
augroup ft_vim
    au!
    au FileType vim setlocal foldmethod=marker
augroup END
augroup ft_vim
    au!
    au FileType vim setlocal foldmethod=marker
augroup END
augroup ft_markdown
    au!
    autocmd FileType gitcommit setlocal spell
    autocmd FileType markdown setlocal spell
    setlocal spell spelllang=en_us
augroup END

"activate omnifunc: strg-x o
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
" autocmd FileType c set omnifunc=ccomplete#Complete
"
au BufRead,BufNewFile *.tpl  set filetype=ezp

" eZ Publish configuration
au BufRead,BufNewFile *.ini.append.php set filetype=ezpini
au BufRead,BufNewFile *.ini.append set filetype=ezpini
au BufRead,BufNewFile *.ini set filetype=ezpini
" }}}
