"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Basics
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"use vim settings, rather then vi settings
set nocompatible

"turn debug on
"set verbose=9

"don't use local version of .vimrc
set noexrc

"autocmd!
filetype off

" initialize vundle
set rtp+=~/dotfiles/vim/bundle/vundle/
" set rtp+=~/dotfiles/vim/bundle/powerline/powerline/bindings/vim
call vundle#rc()

" Vundle {{{

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" ##### UI
Bundle 'chriskempson/base16-vim'
Bundle 'bling/vim-airline'
Bundle 'kien/ctrlp.vim'
" ToDo: configure signature
Bundle 'kshenoy/vim-signature'
Bundle 'Shougo/neocomplete.vim'
" Bundle 'airblade/vim-gitgutter'
Bundle 'ivyl/vim-bling'

" ##### Helpers
Bundle 'tpope/vim-surround'
Bundle 'epmatsw/ag.vim'
" ToDo: check tcomment syntax
Bundle 'tomtom/tcomment_vim'
Bundle 'kana/vim-smartinput'
Bundle 'vim-scripts/matchit.zip'
Bundle 'scrooloose/syntastic'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'godlygeek/tabular'
Bundle 'regedarek/ZoomWin'
Bundle 'zhaocai/GoldenView.Vim'
Bundle 'tpope/vim-repeat'

" ##### Tools
" required for vim-notes
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-notes'
Bundle 'sjl/splice.vim'
Bundle 'sjl/gundo.vim'
Bundle 'vim-scripts/TaskList.vim'
" ToDo: configure nerdtree
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-vinegar'

" ##### FileTypes
Bundle 'othree/html5.vim'
Bundle 'Valloric/MatchTagAlways'
Bundle 'beyondwords/vim-twig'
Bundle 'groenewege/vim-less'
Bundle 'tpope/vim-markdown'
Bundle 'suan/vim-instant-markdown'
Bundle 'pangloss/vim-javascript'
" Bundle 'maksimr/vim-jsbeautify'
Bundle 'fatih/vim-go'
" Bundle 'm2mdas/phpcomplete-extended'
" Bundle 'm2mdas/phpcomplete-extended-laravel'
" Bundle 'm2mdas/phpcomplete-extended-symfony'
Bundle 'BlackIkeEagle/vdebug'
Bundle 'drwX/php-doc.vim'


" Bundle 'majutsushi/tagbar'
" Bundle 'Valloric/YouCompleteMe'
" Bundle 'zweifisch/pipe2eval'
" Bundle 'Shougo/vimproc'
" Bundle 'Shougo/unite.vim'

" }}}

" General {{{
filetype plugin indent on "load filetype plugins/indent settings
syntax on "enable syntax highlight
set shell=/bin/bash "set bash as default shell
" set autochdir "always switch to the current file directory
set backspace=2 "value 2 is the same as =indent,eol,start "make backspace a more flexible
set clipboard=unnamed
set fileformat=unix
set noerrorbells
" set nohidden
set hidden
set history=1000 "keep 1000 lines of command line history
set undolevels=1000
set autoread "set to auto read when a file is changed from the outside
set gdefault "the /g flag on :s substitutions by default
set synmaxcol=800 "don't highlight lines longer than 800

set encoding=utf-8 " Necessary to show unicode glyphs
" let mapleader = ","
set tags=./tags;/

" colorscheme wombat " alternative: maloki, ir_black
" colorscheme wombat256mod
" let base16colorspace=256
colorscheme base16-railscasts
set background=dark

" }}}

" Backup {{{
if ! isdirectory(expand('~/.vimbackup'))
  call mkdir(expand('~/.vimbackup'))
endif
if ! isdirectory(expand('~/.vimtmp'))
  call mkdir(expand('~/.vimtmp'))
endif

if ! isdirectory(expand('~/.vimundo'))
  call mkdir(expand('~/.vimundo'))
endif

" Set persistent undo
set undodir=~/.vimundo
set undofile

" backup
set noswapfile
set backup
set backupdir=~/.vimbackup
set backupext=.vimbackup
set directory=~/.vimtmp
" }}}

"autocmd! bufwritepost vimrc source ~/.vimrc "when vimrc is edited, reload it

" Fixes {{{
" close quick fix window, when leaving file
aug QFClose
  au!
  au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

" close scratch window
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" }}}

" Don't timeout key sequences
set notimeout
" Timeout key codes (don't wait after Esc)
set ttimeout
set ttimeoutlen=10

if !has( "gui_running" )
    " set term=screen-256color
    set term=xterm-256color
endif

" UI {{{
set guioptions=acr
" set cursorline "hightlight the current line/column
" set cursorcolumn
" set nocursorline nocursorcolumn

set laststatus=2 "always show the status bar
set lazyredraw "do not redraw while running macros

" set selectmode=mouse "select when using the mouse
set cmdheight=2 "set the commandheight
set hlsearch "turn if highlight for searched expressions
set incsearch "do incremental searches

set wildmenu "show list instead of ust completing
set wildmode=list:longest,full "command <tab> completion, list matches, then longest common part, then all
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg          " binary images
set wildignore+=*.DS_Store?                             " OSX bullshit
set wildignore+=*.pdf,*.dvi,*.ps                        " Documents

set ignorecase "set ignorecase on
set smartcase
set ruler "show the cursor position all the time

set scrolljump=5 "lines to scroll when cursor leaves screen
set scrolloff=3 "minimun lines to keep adove and below cursor
set showmatch
set showmode "show the current mode

set relativenumber
set number

set showcmd "show partial commands?
set magic "magic for regular expressions
" set guifont=Mensch\ Regular\ for\ Powerline:h11
" set guifont=Inconsolata-dz_for_Powerline:h11
set anti enc=utf-8 gfn=Source_Code_Pro:h13,Inconsolata-dz_for_Powerline:h11,Menlo:h11,Monaco:h11

"set guicursor=n-v-c:block-Cursor-blinkon0,ve:ver35-Cursor,o:hor50-Cursor,i-ci:ver25-Cursor,r-cr:hor20-Cursor,sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

"show characters
set list
" set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set listchars=tab:>\ ,eol:¬,extends:>,precedes:<
" set fillchars=diff:-,vert:| " this are acutally the default settings..

" Show ↪ at the beginning of wrapped lines
" let showbreak = nr2char(8618)

" }}}

" Folding {{{

" Folding based on indentation:
set foldmethod=manual
set nofoldenable " don't open folds by default
" Close higher-level folds on foldenable
set foldnestmax=1
set foldlevel=1

au BufWinLeave * silent! mkview
au BufWinEnter * silent! loadview
" toggle with space
vnoremap <Space> za
nnoremap <Space> za

fu! CustomFoldText() " {{{
    "get first non-blank line
    let fs = v:foldstart
    while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
    endwhile
    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif

    let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " " . foldSize . " lines "
    let foldLevelStr = repeat("+--", v:foldlevel)
    let lineCount = line("$")
    let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
    let expansionString = repeat(".", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
    return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endf " }}}
function! MyFoldText() " {{{
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
    return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction " }}}
set foldtext=CustomFoldText()

" }}}

" Tabs {{{
set expandtab "insert space character, when tab key is pressed
set tabstop=4 "tabs and indenting
set shiftwidth=4
set softtabstop=4
set autoindent "always set auto indenting on

set smartindent
set wrap
set shiftround "always round indents to multiple of shiftwidth
set copyindent "use existind indents for new indents
set preserveindent "save as much indent structure as possible

" }}}

" NETRW {{{
" Toggle Vexplore with Ctrl-E
function! ToggleVExplorer()
  if exists("t:expl_buf_num")
      let expl_win_num = bufwinnr(t:expl_buf_num)
      if expl_win_num != -1
          let cur_win_nr = winnr()
          exec expl_win_num . 'wincmd w'
          close
          exec cur_win_nr . 'wincmd w'
          unlet t:expl_buf_num
      else
          unlet t:expl_buf_num
      endif
  else
      exec '1wincmd w'
      Vexplore
      let t:expl_buf_num = bufnr("%")
  endif
endfunction
map <silent> <C-E> :call ToggleVExplorer()<CR>

" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
let g:netrw_browse_split = 3
let g:netrw_altv = 1

" Default to tree mode
let g:netrw_liststyle=3
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"SYNTASTIC {{{
let g:syntastic_enable_signs=1
let g:syntastic_auto_loc_list=1 " open error-windows
let g:syntastic_auto_jump=0 " jump to the first error
" let g:syntastic_disabled_filetypes = ['html']
let g:syntastic_mode_map = { 'mode': 'passive',
                           \ 'active_filetypes': [ 'php', 'JSON', 'sh', 'css', 'xml', 'twig' ],
                           \ 'passive_filetypes': [ 'html', 'javascript' ] }
let g:syntastic_jsl_conf = '$HOME/.vim/jsl.conf'

" }}}

" TAGBAR {{{
" let g:tagbar_type_scala = {
"     \ 'ctagstype' : 'Scala',
"     \ 'kinds'     : [
"         \ 'p:packages:1',
"         \ 'V:values',
"         \ 'v:variables',
"         \ 'T:types',
"         \ 't:traits',
"         \ 'o:objects',
"         \ 'a:aclasses',
"         \ 'c:classes',
"         \ 'r:cclasses',
"         \ 'm:methods'
"     \ ]
" \ }
" let g:tagbar_type_javascript = {
"     \ 'ctagsbin' : '/usr/local/share/npm/bin/jsctags'
" \ }
" https://github.com/techlivezheng/tagbar-phpctags
" let g:tagbar_type_php = {
"     \ 'ctagsbin'  : '',
"     \ 'kinds'     : [
"         \ 'd:Constants:0',
"         \ 'v:Variables:0',
"         \ 'f:Functions:0',
"         \ 'i:Interfaces:0',
"         \ 'c:Classes:0',
"         \ 'p:Properties:0',
"         \ 'm:Methods:0'
"     \ ],
"     \ 'sro'        : '::',
"     \ 'kind2scope' : {
"         \ 'c' : 'class',
"         \ 'm' : 'method',
"         \ 'f' : 'function',
"         \ 'i' : 'interface'
"     \ },
"     \ 'scope2kind' : {
"         \ 'class'     : 'c',
"         \ 'method'    : 'm',
"         \ 'function'  : 'f',
"         \ 'interface' : 'i'
"     \ }
" \ }
" let g:tagbar_type_markdown = {
"     \ 'ctagstype' : 'markdown',
"     \ 'kinds' : [
"         \ 'h:Heading_L1',
"         \ 'i:Heading_L2',
"         \ 'k:Heading_L3'
"     \ ]
" \ }

" }}}

" Powerline {{{
" let g:Powerline_symbols = 'fancy'
" }}}

" Mustache {{{
let g:mustache_abbreviations = 1
" }}}

" vim-notes {{{
if ! isdirectory(expand('~/notes'))
  call mkdir(expand('~/notes'))
endif
let g:notes_directories = [ '~/notes' ]
let g:notes_title_sync = 'change_title' " if file name or first line is changed, this update the first line

let g:miniBufExplUseSingleClick = 1 "open buffer with one click
let g:miniBufExplorerMoreThanOne = 0 "always open bufexplorer
let g:miniBufExplCheckDupeBufs = 0 " disable duplicate buffer
let g:miniBufExplModSelTarget = 1
let g:miniBufExplMapCTabSwitchBufs = 1 "use <C-TAB> and <C-S-TAB> to switch between buffers
" let g:miniBufExplMapWindowNavVim = 1 "control+[hjkl] to move between buffers
let g:miniBufExplTabWrap = 1 " make tabs show complete (no broken on two lines)
autocmd BufRead,BufNew :call UMiniBufExplorer "update explorer without navigating

" }}}

" CtrlP {{{
let g:ctrlp_working_path_mode = 0 "don't change working directory..
let g:ctrlp_match_window_reversed = 0 " listing order from top to bottom
let g:ctrlp_clear_cache_on_exit = 0 " cross session caching
let g:ctrlp_cache_dir = $HOME.'/.vimtmp/ctrlp'
let g:ctrlp_max_depth = 20
let g:ctrlp_dotfiles = 0 " don't scan dotfiles
let g:ctrlp_open_new_file = 'u' " ope new file in same window
let g:ctrlp_open_multiple_files = 'r' " open multiple files in the current window
let g:ctrlp_jump_to_buffer = 0
let g:ctrlp_switch_buffer = 'Et'

let egrep_vi_files = '7z|7|avi|bak|bin|bmp|db|docx|doc|exe|flac|flv|gif|ico|img|iso|jar|jpg|log|mkv|mp3|odg|ods|odt|pdf|plt|png|ppt|rar|tgz|wav|wma|wmv|xsl|zip|out|swp|swo'

let ctrlp_filter_greps = "".
    \ "egrep -iv '\\.(" .
    \ egrep_vi_files .
    \ ")$' | " .
    \ "egrep -v '^(\\./)?(" .
    \ "deploy/|lib/|classes/|libs/|deploy/vendor/|.git/|.hg/|.svn/|.*migrations/" .
    \ ")' | sort"

let my_ctrlp_user_command = "" .
    \ "find %s '(' -type f -or -type d ')' -maxdepth " . g:ctrlp_max_depth . " -not -path '*/\\.*/*' | " .
    \ ctrlp_filter_greps

let my_ctrlp_git_command = "" .
    \ "cd %s && git ls-files --exclude-standard -co | " .
    \ ctrlp_filter_greps

let g:ctrlp_user_command = ['.git/', my_ctrlp_git_command, my_ctrlp_user_command]

" }}}

" CtrlPBuffer {{{
nnoremap <C-b> :CtrlPBuffer<CR>
" }}}

" EasyMotion {{{
let g:EasyMotion_do_mapping = 0

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

"
" nnoremap <silent> <Leader>f      <Plug>(easymotion-f)
" onoremap <silent> <Leader>f      <Plug>(easymotion-f)
" vnoremap <silent> <Leader>f :<C-U>call EasyMotion#F(1, 0)<CR>
"
" nnoremap <silent> <Leader>F      <Plug>(easymotion-F)
" onoremap <silent> <Leader>F      <Plug>(easymotion-F)
" vnoremap <silent> <Leader>F :<C-U>call EasyMotion#F(1, 1)<CR>

" onoremap <silent> <Leader>t      :call EasyMotion#T(0, 0)<CR>
" onoremap <silent> <Leader>T      :call EasyMotion#T(0, 1)<CR>

" TODO experimentel..
" Gif config
" nmap / <Plug>(easymotion-sn)
" xmap / <Esc><Plug>(easymotion-sn)\v%V
" omap / <Plug>(easymotion-tn)
" nnoremap g/ /
" These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
" map  n <Plug>(easymotion-next)
" map  N <Plug>(easymotion-prev)

" fix colors
" hi link EasyMotionTarget ErrorMsg
" hi link EasyMotionShade  Comment

" }}}

" jsbeautify {{{
" autocmd FileType javascript noremap <buffer>  <c-M> :call JsBeautify()<cr>
" autocmd FileType html noremap <buffer> <c-M> :call HtmlBeautify()<cr>
" autocmd FileType css noremap <buffer> <c-M> :call CSSBeautify()<cr>
" }}}

" ACK {{{
" nnoremap <bs> :Ack! '\b<c-r><c-w>\b'<cr>
" }}}

" if performance down
" let loaded_matchparen = 1
" http://vimdoc.sourceforge.net/htmldoc/intro.html#keycodes

" TaskList {{{
nnoremap <leader>v <Plug>TaskList
" }}}

" SmartInput {{{
call smartinput#define_rule({
            \   'at':       '(\%#)',
            \   'char':     '<Space>',
            \   'input':    '<Space><Space><Left>',
            \   })

call smartinput#map_to_trigger('i', '<Space>', '<Space>', '<Space>')
call smartinput#define_rule({
            \   'at':       '( \%# )',
            \   'char':     '<BS>',
            \   'input':    '<Del><BS>',
            \   })

call smartinput#define_rule({
            \   'at':       '{\%#}',
            \   'char':     '<Space>',
            \   'input':    '<Space><Space><Left>',
            \   })

call smartinput#define_rule({
            \   'at':       '{ \%# }',
            \   'char':     '<BS>',
            \   'input':    '<Del><BS>',
            \   })

call smartinput#define_rule({
            \   'at':       '\[\%#\]',
            \   'char':     '<Space>',
            \   'input':    '<Space><Space><Left>',
            \   })

call smartinput#define_rule({
            \   'at':       '\[ \%# \]',
            \   'char':     '<BS>',
            \   'input':    '<Del><BS>',
            \   })

" }}}

" Gundo {{{
let g:gundo_preview_bottom = 1

" }}}

" MatchTagAlways {{{
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'htmldjango' : 1,
    \ 'ezp' : 1,
    \ 'twig' : 1,
    \}
" }}}

" YouCompleteMe {{{
" change this map, c-space doesn't work, because control will be send the ESC
" character. also when c+space are pressed (maybe change this on keyremap4mac)
" let g:ycm_key_invoke_completion = '<C-Space>'
" }}}

" Slime {{{
" let g:slime_target = "tmux"
" }}}

" bling {{{
let g:bling_time = 150
let g:bling_count = 1
" }}}

" neocomplete {{{
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#smart_close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" ToDo: navigte optios with <control>+j/k
" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
" let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
" }}}

" VDebug {{{
let g:vdebug_keymap = {
\    "run" : "<Leader>s",
\    "run_to_cursor" : "<Down>",
\    "step_over" : "<Up>",
\    "step_into" : "<Right>",
\    "step_out" : "<Left>",
\    "close" : "q",
\    "detach" : "x",
\    "set_breakpoint" : "<Leader>d",
\    "eval_visual" : "<Leader>e"
\}

let g:vdebug_options = {
\    "break_on_open" : 0,
\    "watch_window_style": 'compact',
\    "watch_window_height": 40,
\    "status_window_height": 5
\}
" }}}

" pdv {{{
" let g:pdv_template_dir = $HOME ."/.vim/bundle/pdv/templates_snip"
" nnoremap <buffer> <C-p> :call pdv#DocumentWithSnip()<CR>
" }}}

" ultisnips {{{
" let g:UltiSnipsExpandTrigger="<leader>J"
" }}}

" phpDoc {{{
let g:pdv_cfg_Type = "mixed"
let g:pdv_cfg_Package = "Web"
let g:pdv_cfg_Version = "//autogen//"
let g:pdv_cfg_Author = "Juan Pablo S."
let g:pdv_cfg_Copyright = "Copyright (c) 2014 All rights reserved."
let g:pdv_cfg_License = "PHP Version 5.4"
" }}}

" Unite {{{
" let g:unite_source_history_yank_enable = 1
" call unite#filters#matcher_default#use(['matcher_fuzzy'])
" nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
" nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
" nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>
" nnoremap <leader>o :<C-u>Unite -no-split -buffer-name=outline -start-insert outline<cr>
" nnoremap <leader>y :<C-u>Unite -no-split -buffer-name=yank    history/yank<cr>
" nnoremap <leader>e :<C-u>Unite -no-split -buffer-name=buffer  buffer<cr>
"
" " Custom mappings for the unite buffer
" autocmd FileType unite call s:unite_settings()
" function! s:unite_settings()
"   " Play nice with supertab
"   let b:SuperTabDisabled=1
"   " Enable navigation with control-j and control-k in insert mode
"   imap <buffer> <C-j>   <Plug>(unite_select_next_line)
"   imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
"   imap <silent><buffer><expr> <C-x> unite#do_action('split')
"   imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
"   imap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
"   nmap <buffer> <ESC> <Plug>(unite_exit)
" endfunction
" if executable('ag')
"   " Use ag in unite grep source.
"   let g:unite_source_grep_command = 'ag'
"   let g:unite_source_grep_default_opts =
"         \ '--line-numbers --nocolor --nogroup --hidden --ignore ' .
"         \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
"   let g:unite_source_grep_recursive_opt = ''
" endif
" }}}

" php-complete {{{
" autocmd FileType  php call s:setPhpEnviroment()
function! s:setPhpEnviroment()
    setlocal omnifunc=phpcomplete_extended#CompletePHP
    let g:phpcomplete_index_composer_command = 'composer'
    " echo getcwd().'/bootstrap/start.php'
    " TODO
    " if on laravel project, execute php artisan dump-autoload instead of
    " composer update. this will also generate autoloads for workbench
    if phpcomplete_extended#laravel#is_valid_project()
        " this doesnt work, because there is a validator, wich executes
        " composer version
        " let g:phpcomplete_index_composer_command = 'php artisan'
    endif
endfunction
" }}}

" Maps {{{
" exits insert mode with jj
inoremap jj <Esc>
cnoremap <expr> j getcmdline()[getcmdpos() - 2] ==# 'j' ? "\<BS>\<ESC>" : 'j'

nnoremap <C-n> :set invnumber<CR>

nnoremap gp `[v`]

"nnoremap n nzvzz
"nnoremap N Nzvzz
" nnoremap * *zvzz
nnoremap # *zvzz
nnoremap g; g;zz
nnoremap g, g,zz
" TODO: jump and pulse..
nnoremap <c-o> <c-o>:call Pulse()<CR>
nnoremap <c-i> <c-i>:call Pulse()<CR>

" F<nr>
" NerdTree
noremap  <F2> :NERDTreeToggle<cr>
inoremap <F2> <esc>:NERDTreeToggle<cr>
" toggle paste
nnoremap <F3> :set paste!<cr>
" gundo
nnoremap <F5> :GundoToggle<CR>
" remove unwanted spaces and keep last search and retab
nnoremap <silent> <F6> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<Bar>:retab<CR>
" TODO: when i search for a new entry, than always activate hlseach
nnoremap <silent> <F7> :set hlsearch!<CR>
" phpDoc
nnoremap <buffer> <C-i> :set paste<CR>:call PhpDoc()<CR>:set nopaste<CR><F6>
" TagBar
" nmap <F8> :TagbarToggle<CR>
" toggle syntastic mode
nnoremap <F10> :SyntasticToggleMode<CR>
" toggle between displaying whitespace characters or not
noremap <F11> :set list!<CR>

" Save with sudo.
cnoremap w!! %!sudo tee > /dev/null %
cnoremap W w
cnoremap Bd bd

noremap k gk
noremap j gj
noremap 0 g0
noremap $ g$

" Navigate 4x faster when holding down Ctrl
nnoremap <c-j> 4j
nnoremap <c-k> 4k
nnoremap <c-h> 4h
nnoremap <c-l> 4l
cnoremap <c-j> 4j
cnoremap <c-k> 4k
cnoremap <c-h> 4h
cnoremap <c-l> 4l

" disable arrows
noremap <Up> <nop>
noremap <Down> <nop>
noremap <Left> <nop>
noremap <Right> <nop>

" start/end of line
nnoremap <C-h> ^
nnoremap <C-l> $
vnoremap <C-h> ^
vnoremap <C-l> $

" split lines under the cursor (opposite of J)
map K i<CR><Esc>g;

" Ctrl-j/k deletes blank line below/above, and Alt-j/k inserts.
"nnoremap <silent> <C-j> m`:silent +g/\m^\s*$/d<CR>``:noh<CR>
"nnoremap <silent> <C-k> m`:silent -g/\m^\s*$/d<CR>``:noh<CR>
nnoremap <silent> ∆ :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent> ˚ :set paste<CR>m`O<Esc>``:set nopaste<CR>

" Delete a character with the black hole register.
nnoremap X  "_X
nnoremap x  "_x

cnoremap <C-b> <S-Left>
cnoremap <C-w> <S-Right>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-h> <Left>
cnoremap <C-l> <Right>

" Fix linewise visual selection of various text objects
nnoremap VV V
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV

nnoremap <leader>V V`]

noremap ' `

" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Languages
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Twig
autocmd FileType apache set commentstring=#\ %s

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Highlight Word {{{
" https://github.com/sjl/dotfiles/blob/master/vim/vimrc#L1827
"
" This mini-plugin provides a few mappings for highlighting words temporarily.
"
" Sometimes you're looking at a hairy piece of code and would like a certain
" word or two to stand out temporarily.  You can search for it, but that only
" gives you one color of highlighting.  Now you can use <leader>N where N is
" a number from 1-6 to highlight the current word in a specific color.

function! HiInterestingWord(n)
    " Save our location.
    normal! mz

    " Yank the current word into the z register.
    normal! "zyiw

    " Calculate an arbitrary match ID.  Hopefully nothing else is using it.
    let mid = 86750 + a:n

    " Clear existing matches, but don't worry if they don't exist.
    silent! call matchdelete(mid)

    " Construct a literal pattern that has to match at boundaries.
    let pat = '\V\<' . escape(@z, '\') . '\>'

    " Actually match the words.
    call matchadd("InterestingWord" . a:n, pat, 1, mid)

    " Move back to our original location.
    normal! `z
endfunction

" TODO: clear all iteresting words
nnoremap <silent> <leader>1 :call HiInterestingWord(1)<cr>
nnoremap <silent> <leader>2 :call HiInterestingWord(2)<cr>
nnoremap <silent> <leader>3 :call HiInterestingWord(3)<cr>
nnoremap <silent> <leader>4 :call HiInterestingWord(4)<cr>
nnoremap <silent> <leader>5 :call HiInterestingWord(5)<cr>
nnoremap <silent> <leader>6 :call HiInterestingWord(6)<cr>

hi def InterestingWord1 guifg=#000000 ctermfg=16 guibg=#ffa724 ctermbg=214
hi def InterestingWord2 guifg=#000000 ctermfg=16 guibg=#aeee00 ctermbg=154
hi def InterestingWord3 guifg=#000000 ctermfg=16 guibg=#8cffba ctermbg=121
hi def InterestingWord4 guifg=#000000 ctermfg=16 guibg=#b88853 ctermbg=137
hi def InterestingWord5 guifg=#000000 ctermfg=16 guibg=#ff9eb8 ctermbg=211
hi def InterestingWord6 guifg=#000000 ctermfg=16 guibg=#ff2c4b ctermbg=195

" }}}

" for debbug
function! SyntaxItem()
  return synIDattr(synID(line("."),col("."),1),"name")
endfunction

" show syntax block
" call Pl#Theme#InsertSegment(SyntaxItem(), 'after', 'filetype')

set scs "smart search (override 'ic' when pattern has upper)
set complete=.,w,b,t,kspell "set the autocomplete search list

" Next and Last {{{
" thanks steve losh

"
" Motion for "next/last object".  "Last" here means "previous", not "final".
" Unfortunately the "p" motion was already taken for paragraphs.
"
" Next acts on the next object of the given type in the current line, last acts
" on the previous object of the given type in the current line.
"
" Currently only works for (, [, {, b, r, B, ', and ".
"
" Some examples (C marks cursor positions, V means visually selected):
"
" din'  -> delete in next single quotes                foo = bar('spam')
"                                                      C
"                                                      foo = bar('')
"                                                                C
"
" canb  -> change around next parens                   foo = bar('spam')
"                                                      C
"                                                      foo = bar
"                                                               C
"
" vil"  -> select inside last double quotes            print "hello ", name
"                                                                        C
"                                                      print "hello ", name
"                                                             VVVVVV

onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>

onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>

function! s:NextTextObject(motion, dir)
  let c = nr2char(getchar())

  if c ==# "b"
      let c = "("
  elseif c ==# "B"
      let c = "{"
  elseif c ==# "r"
      let c = "["
  endif

  exe "normal! ".a:dir.c."v".a:motion.c
endfunction

" }}}

" Number Motion {{{

" Motion for numbers.  Great for CSS.  Lets you do things like this:
"
" margin-top: 200px; -> daN -> margin-top: px;
"              ^                          ^
" TODO: Handle floats.

onoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
xnoremap N :<c-u>call <SID>NumberTextObject(0)<cr>
onoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap aN :<c-u>call <SID>NumberTextObject(1)<cr>
onoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>
xnoremap iN :<c-u>call <SID>NumberTextObject(1)<cr>

function! s:NumberTextObject(whole)
    normal! v

    while getline('.')[col('.')] =~# '\v[0-9]'
        normal! l
    endwhile

    if a:whole
        normal! o

        while col('.') > 1 && getline('.')[col('.') - 2] =~# '\v[0-9]'
            normal! h
        endwhile
    endif
endfunction

" }}}

" Pulse Line {{{

function! Pulse() " {{{
    let current_window = winnr()
    windo set nocursorline
    execute current_window . 'wincmd w'
    setlocal cursorline

    redir => old_hi
        silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    let steps = 9
    let width = 1
    let start = width
    let end = steps * width
    let color = 233

    for i in range(start, end, width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor
    for i in range(end, start, -1 * width)
        execute "hi CursorLine ctermbg=" . (color + i)
        redraw
        sleep 6m
    endfor

    execute 'hi ' . old_hi
    " TODO: check what was the value before..
    windo set nocursorline
endfunction " }}}

" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" show rebundant spaces
highlight RedundantSpaces ctermbg=grey guibg=grey
au Syntax * syn match RedundantSpaces /\s\+$\| \+\ze\t/
highlight BadWhitespace ctermbg=red guibg=red
fun! s:MatchBadWhitespace(current)
    if exists('b:hide_bad_whitespace')
        match none
    return
    endif
    if a:current
        match BadWhitespace /\s\+$/
    else
        match BadWhitespace /\s\+\%#\@<!$/
    endif
endfun

augroup WhitespaceMatch
    " Highlight whitespace on open buffer
    autocmd BufWinEnter * call s:MatchBadWhitespace(1)
    " Don't highlight while typing
    autocmd InsertEnter * call s:MatchBadWhitespace(0)
    autocmd InsertLeave * call s:MatchBadWhitespace(1)
    " Clear match when leaving buffer to avoid memory leaks
    autocmd BufWinLeave * call clearmatches()
augroup END


"set custom statusline for special windows
"http://dev.gentoo.org/~bass/configs/vimrc.html
"still using powerline?
" if has("autocmd")
"     au FileType qf
"                 \ if &buftype == "quickfix" |
"                 \     setlocal statusline=%2*%-3.3n%0* |
"                 \     setlocal statusline+=\ \[Compiler\ Messages\] |
"                 \     setlocal statusline+=%=%2*\ %<%P |
"                 \ endif
"
"     fun! FixMiniBufExplorerTitle()
"         if "-MiniBufExplorer-" == bufname("%")
"             setlocal statusline=%2*%-3.3n%0*
"             setlocal statusline+=\[Buffers\]
"             setlocal statusline+=%=%2*\ %<%P
"         endif
"     endfun
"
"     au BufWinEnter *
"                 \ let oldwinnr=winnr() |
"                 \ windo call FixMiniBufExplorerTitle() |
"                 \ exec oldwinnr . " wincmd w"
" endif

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" Set the working directory to the project's root, or to the parent directory
" of the current file if a root can't be found.
func! s:etwd()
    let cph = expand('%:p:h', 1)
    if match(cph, '\v^<.+>://') >= 0 | retu | en
    for mkr in ['.git/', '.hg/', '.vimprojects']
        let wd = call('find'.(mkr =~ '/$' ? 'dir' : 'file'), [mkr, cph.';'])
        if wd != '' | let &acd = 0 | brea | en
    endfo
    exe 'lc!' fnameescape(wd == '' ? cph : substitute(wd, mkr.'$', '.', ''))
endfunc

au BufEnter * if &ft !=# 'notes' | cal s:etwd() | endif " but don't change working directory, if opening notes
" au BufEnter * cal s:etwd()

" filetypes {{{
augroup ft_c
    au!
    au FileType php setlocal foldmethod=manual
augroup END
augroup ft_vim
    au!
    au FileType vim setlocal foldmethod=marker
augroup END
augroup ft_vim
    au!
    au FileType vim setlocal foldmethod=marker
augroup END
augroup ft_markdown
    au!
    autocmd FileType gitcommit setlocal spell
    autocmd FileType markdown setlocal spell
    setlocal spell spelllang=en_us
augroup END
" }}}

" augroup cline
"     au!
"     au WinLeave,InsertEnter * set nocursorline nocursorcolumn
"     au WinEnter,InsertLeave * set cursorline cursorcolumn
" augroup END

"activate omnifunc: strg-x o
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
" autocmd FileType php set omnifunc=phpcomplete#CompletePHP
" autocmd FileType c set omnifunc=ccomplete#Complete
"
au BufRead,BufNewFile *.tpl  set filetype=ezp

" eZ Publish configuration
au BufRead,BufNewFile *.ini.append.php set filetype=ezpini
au BufRead,BufNewFile *.ini.append set filetype=ezpini
au BufRead,BufNewFile *.ini set filetype=ezpini
